# C++ Templates Overview

C++ templates are a powerful feature, enabling:

- [Generic Programming (Function/Class Templates)](#generic-programming-function-class-templates)
- [Type-Specific Customization (Specialization)](#type-specific-customization-specialization)
- [Compile-Time Computations (Metaprogramming)](#compile-time-computations-metaprogramming)
- [Enforcing Constraints (SFINAE, Concepts)](#enforcing-constraints-sfinae-concepts)
- [Efficient Static Polymorphism (CRTP)](#efficient-static-polymorphism-crtp)

---

## Generic Programming (Function/Class Templates)
Templates allow writing code that works with multiple data types, increasing reusability. Examples include:

```cpp
#include <iostream>

// Function Template
template <typename T>
T sum(T a, T b) {
    return a + b;
}

// Class Template
template <typename T>
class test {
public:
    T sum(const T& a, const T& b) {
        return a + b;
    }
};

int main() {
    test<int> t;
    std::cout << "sum = " << t.sum(30, 20) << std::endl;
    return 0;
}
